// Generated by CoffeeScript 1.8.0
var authenticatedUsers, contentGroups, db, languages, models, regions, users, websites, _und;

_und = require('underscore');

models = require('../coffee_modules/models');

db = require('../coffee_modules/data-api');

authenticatedUsers = {};

websites = [];

contentGroups = [];

regions = [];

languages = [];

users = [];

db.getWebsites(function(data) {
  return websites = data;
});

db.getContentGroups(function(data) {
  return contentGroups = data;
});

db.getRegions(function(data) {
  return regions = data;
});

db.getLanguages(function(data) {
  return languages = data;
});

db.getAdmins(function(data) {
  return users = data;
});

module.exports = function(io) {
  var refreshRegions, refreshWebsites;
  refreshWebsites = function() {
    return db.getWebsites(function(data) {
      websites = data;
      return io.to('auth-users').emit('websites-update', data);
    });
  };
  refreshRegions = function() {
    return db.getRegions(function(data) {
      regions = data;
      return io.to('auth-users').emit('regions-update', data);
    });
  };
  return io.on('connection', function(socket) {
    var domain, ip, putRegion;
    socket.join('all-users');
    domain = socket.handshake.headers.host.split(':')[0];
    ip = socket.client.conn.remoteAddress;
    console.log('+ user ' + socket.id + ' connected + domain: ' + domain + ' IP: ' + ip);
    socket.on('disconnect', function() {
      authenticatedUsers[socket.id] = void 0;
      io.to('auth-users').emit('auth-users-update', authenticatedUsers);
      return console.log('- user ' + socket.id + ' disconnected - ' + domain + ' IP: ' + ip);
    });
    socket.on('chat-message', function(message) {
      return io.to('auth-users').emit('chat-message-update', {
        user: authenticatedUsers[socket.id],
        message: message
      });
    });
    socket.on('working-on', function(str) {
      var x, y;
      if (str && authenticatedUsers[socket.id]) {
        x = authenticatedUsers[socket.id];
        y = {
          _id: x._id,
          firstName: x.firstName,
          lastName: x.lastName,
          workingOn: str
        };
        authenticatedUsers[socket.id] = y;
        io.to('auth-users').emit('auth-users-update', authenticatedUsers);
        return console.log(y);
      }
    });
    socket.on('create-user', function(data) {
      return db.upsertAdmin(data, function() {
        return db.getAdmins(function(data) {
          return io.to('auth-users').emit('users-update', data);
        });
      });
    });
    socket.on('create-content-group', function(data) {
      return db.upsertContentGroup(data, function() {
        return db.getContentGroups(function(data) {
          return io.to('auth-users').emit('content-groups-update', data);
        });
      });
    });
    putRegion = function(data) {
      return db.upsertRegion(data, function() {
        return db.getRegions(function(data) {
          return io.to('auth-users').emit('regions-update', data);
        });
      });
    };
    socket.on('create-region', putRegion);
    socket.on('update-region', putRegion);
    socket.on('create-language', function(data) {
      return db.upsertLanguage(data, function() {
        return db.getLanguages(function(data) {
          return io.to('auth-users').emit('languages-update', data);
        });
      });
    });
    socket.on('create-menu', function(data) {
      return db.upsertMenu(data, function() {
        return db.getMenus(function(data) {
          return io.to('auth-users').emit('menus-update', data);
        });
      });
    });
    socket.on('create-page', function(data) {
      return db.upsertPage(data, function() {
        return db.getPages(function(data) {
          return io.to('auth-users').emit('pages-update', data);
        });
      });
    });
    socket.on('create-website', function(data) {
      return db.upsertWebsite(data, function() {
        return refreshWebsites();
      });
    });
    socket.on('add-content-group', function(data) {
      if (data && data.website && data.contentGroupId) {
        return db.getWebsite({
          slug: data.website
        }, function(site) {
          site.contentGroups.push(data.contentGroupId);
          return db.updateWebsiteContentGroups(data.website, {
            contentGroups: site.contentGroups
          }, function() {
            return refreshWebsites();
          });
        });
      }
    });
    socket.on('add-region', function(data) {
      if (data && data.website && data.regionId) {
        return db.getWebsite({
          slug: data.website
        }, function(site) {
          site.regions.push(data.regionId);
          return db.updateWebsiteRegions(data.website, {
            regions: site.regions
          }, function() {
            return refreshWebsites();
          });
        });
      }
    });
    socket.on('add-language-to-region', function(data) {
      if (data && data.regionId && data.languageId) {
        return db.getRegion({
          _id: data.regionId
        }, function(region) {
          region.languages.push(data.languageId);
          return db.updateRegionLanguages(data.regionId, {
            languages: region.languages
          }, function() {
            return refreshRegions();
          });
        });
      }
    });
    return socket.on('user-login', function(data) {
      if (data) {
        return models.Admin.findOne({
          username: data.username,
          password: data.password
        }, function(err, data) {
          if (data) {
            socket.join('auth-users');
            data.password = data.username = data.email = data.__v = void 0;
            data.socket = socket.id;
            socket.emit('login-success', data);
            authenticatedUsers[socket.id] = data;
            io.to('auth-users').emit('auth-users-update', authenticatedUsers);
            socket.emit('websites-update', websites);
            socket.emit('content-groups-update', contentGroups);
            socket.emit('regions-update', regions);
            socket.emit('languages-update', languages);
            return socket.emit('users-update', users);
          }
        });
      }
    });
  });
};
